function loadScript(filename, onloadCallback, type) {
    var script = document.querySelector('script[src="' + filename + '?v=' + CACHE_VERSION + '"]');
    if (script) {
        appendOnloadCallback(script, onloadCallback);
    } else {
        script = document.createElement('script');
        if(type) script.setAttribute('type', type);
        script.setAttribute('fetchpriority', 'high');
        script.src = filename + '?v=' + CACHE_VERSION;
        script.addEventListener('load', function () {
            onloadCallback && onloadCallback();
            this.dataset.loaded = 1;
        });
        document.body.appendChild(script);
    }
}
function loadStylesheet(filename, onloadCallback) {
    var link = document.querySelector('link[href="' + filename + '?v=' + CACHE_VERSION + '"]');
    if (link) {
        appendOnloadCallback(link, onloadCallback);
    } else {
        link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = filename + '?v=' + CACHE_VERSION;
        link.addEventListener('load', function () {
            onloadCallback && onloadCallback();
            this.dataset.loaded = 1;
        });
        document.body.appendChild(link);
    }
}
function appendOnloadCallback(el, callback) {
    el.dataset.loaded ? callback && callback() : el.addEventListener('load', callback);
}
function loadAdScript() {
    if(browserCompat.isFbInstaInApp()) return;

    loadCMP();

    loadAdSense();
    defSetupad();
    loadSetupad();

    loadPerfops();
}
function loadCMP() {
    if(window.CMPLoaded) return;

    const observer = new MutationObserver(function (mutations) {
        for (const mutation of mutations)
            for (const el of mutation.addedNodes)
                if (el.classList && el.classList.contains('stpd_cmp')) {
                    observer.disconnect();
                    document.querySelector('#darkTheme').dispatchEvent(new Event('change'));
                }
    });
    observer.observe(document.body, { childList: true });

    var script = document.createElement('script');
    script.setAttribute('data-prop-id', '6308');
    script.src = 'https://cmp.setupcmp.com/cmp/cmp/cmp-stub.js';
    document.head.appendChild(script);

    script = document.createElement('script');
    script.setAttribute('data-prop-stpd-cmp-id', '6308');
    script.src = 'https://cmp.setupcmp.com/cmp/cmp/cmp-v1.js';
    document.head.appendChild(script);

    document.querySelector('#btnCMP').style.display = '';

    window.CMPLoaded = true;
}
function loadAdSense() {
    if(document.querySelector('script[data-ad-client]')) return;

    var script = document.createElement('script');
    script.setAttribute('data-ad-client', 'ca-pub-1175359427331401');
    script.src = 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js';
    script.addEventListener('error', abdFail);
    document.head.appendChild(script);
}
function defSetupad() {
    if(window.setupadDefined) return;
    if(VIEW != 'convert') return;

    window.googletag = window.googletag || {cmd: []};
    googletag.cmd.push(function() {
        //The ordering of slots here affects the loading speed for Slow 3G:
        if (window.bottomProvider == 'setupad')
            googletag.defineSlot('/147246189,22824969725/mconverter.eu_800x336_bottom_banner_desktop', [[728,90],[300,250],[336,280],[336,320],[320,320],[300,300],[320,250],[750,200],[750,150],[750,100],[700,250],[700,200],[700,150],[800,300]], 'mconverter_eu_bottom_banner_responsive').addService(googletag.pubads());

        if (window.innerWidth >= 1500) {
            googletag.defineSlot('/147246189,22824969725/mconverter.eu_300x600_desktop_left', [[300,600],[160,600],[300,250],[300,300]], 'mconverter_eu_desktop_left').addService(googletag.pubads());
            googletag.defineSlot('/147246189,22824969725/mconverter.eu_300x600_desktop_right', [[300,600],[160,600],[300,250],[300,300]], 'mconverter_eu_desktop_right').addService(googletag.pubads());
        } else if (window.innerWidth >= 1190) {
            googletag.defineSlot('/147246189,22824969725/mconverter.eu_160x600_desktop_left', [[160,600],[120,600]], 'mconverter_eu_desktop_left').addService(googletag.pubads());
            googletag.defineSlot('/147246189,22824969725/mconverter.eu_160x600_desktop_right', [[160,600],[120,600]], 'mconverter_eu_desktop_right').addService(googletag.pubads());
        }

        googletag.pubads().disableInitialLoad();
        googletag.pubads().enableSingleRequest();
        googletag.pubads().collapseEmptyDivs();
        googletag.enableServices();
    });

    if (window.bottomProvider == 'setupad')
        googletag.cmd.push(function() { googletag.display('mconverter_eu_bottom_banner_responsive'); });
    if (window.innerWidth >= 1190)
        googletag.cmd.push(function() { 
            googletag.display('mconverter_eu_desktop_left');
            googletag.display('mconverter_eu_desktop_right');
        });

    window.setupadDefined = true;
}
function loadSetupad(forReward) {
    if(window.setupadAdded) return;
    if(VIEW != 'convert') return;
    if(!hasSetupadBanners() && !forReward) return;

    var script = document.createElement('script');
    script.src = 'https://securepubads.g.doubleclick.net/tag/js/gpt.js';
    script.addEventListener('error', abdFail);
    document.head.appendChild(script);

    script = document.createElement('script');
    script.src = 'https://stpd.cloud/saas/3973';
    script.addEventListener('error', abdFail);
    script.addEventListener('load', function () {
        window.setupadLoaded = true;
        if(window.initSetupadOnLoad) initSetupad();
    });
    document.head.appendChild(script);

    window.setupadAdded = true;
}
function initSetupad() {
    window.stpd = window.stpd || {que: []};
    stpd.que.push(function() {
        stpd.initialize();
    });
}
function hasSetupadBanners() {
    return window.bottomProvider == 'setupad' || window.innerWidth >= 1190;
}
function abdFail() {
    if(document.querySelector('#noAbd')) document.querySelector('#noAbd').remove();
    window.abdDone = true;
}
function loadFC() {
    if(window.fcShown) return;

    var script = document.createElement('script');
    script.src = 'https://fundingchoicesmessages.google.com/i/pub-1175359427331401?ers=1';
    script.setAttribute('nonce', 'Hy49XEmJR0o7CdpY23oNQA');
    document.body.appendChild(script);

    (function() {function signalGooglefcPresent() {if (!window.frames['googlefcPresent']) {if (document.body) {const iframe = document.createElement('iframe'); iframe.style = 'width: 0; height: 0; border: none; z-index: -1000; left: -1000px; top: -1000px;'; iframe.style.display = 'none'; iframe.name = 'googlefcPresent'; document.body.appendChild(iframe);} else {setTimeout(signalGooglefcPresent, 0);}}}signalGooglefcPresent();})();
    
    window.fcShown = true;
}
function loadPerfops() {
    if(window.perfopsLoaded) return;

    var iframe = document.createElement('iframe');
    iframe.style.display = 'none';
    iframe.sandbox = 'allow-scripts allow-same-origin';
    iframe.src = 'https://perfops-rum.pages.dev/';
    document.body.appendChild(iframe);

    window.perfopsLoaded = true;
}

var toast = {
    dom: {},
    timer: 0,
    init: function () {
        this.dom.toast = document.querySelector('#toast');
        this.dom.msg = document.querySelector('#toastMsg');
        this.dom.btn = document.querySelector('#toastBtn');
    },
    show: function (msg, duration, btnText, btnAction) {
        if (this.timer) {
            //There's a toast already shown
            this.hide();
            setTimeout(function () {
                this.show(msg, duration, btnText, btnAction);
            }.bind(this), 300);
            return;
        }
    
        this.dom.msg.textContent = msg;
        this.dom.btn.textContent = btnText;
        this.dom.btn.onclick = btnAction;
        this.dom.btn.style.display = btnAction ? '' : 'none';
        this.dom.toast.classList.remove('toast-hidden');
    
        this.timer = setTimeout(function () {
            this.hide();
        }.bind(this), duration);
    },
    hide: function () {
        clearTimeout(this.timer);
        this.timer = 0;
        this.dom.toast.classList.add('toast-hidden');
    }
};

var browserCompat = {
    ua: navigator.userAgent,
    isSamsungBlockingDownload: function () {
        //Since v11.2, Samsung Internet Browser blocks automatic JS downloads:
        return this.ua.match(/SamsungBrowser/i) &&
            this.ua.match(/SamsungBrowser\/([0-9]+)/i)[1]>=11;
    },
    isChrDesktopBlockingDownload: function () {
        //Chromiums on desktop:
        if (typeof navigator.userAgentData === 'undefined') return;//Firefox, Safari not supporting this yet
        if (navigator.userAgentData.mobile) return;
        for (browser of navigator.userAgentData.brands)
            if (browser.brand == 'Chromium')
                return true;
    },
    isFbInstaInApp: function () {
        //Check for the mobile in-app browser of Facebook-owned apps:
        return this.ua.indexOf('FBAN') > -1 || this.ua.indexOf('FBAV') > -1 ||
            this.ua.indexOf('Instagram') > -1 || this.ua.indexOf('Barcelona') > -1;//Threads
    },
    isWebkit: function () {
        //Detect all iOS devices, including the iPad pretending to be Macintosh from iOS 13:
        return (/iPad|iPhone|iPod|Macintosh/.test(this.ua) && "ontouchend" in document) || this.isWebkitDesktop();
    },
    isWebkitDesktop: function () {
        //Detect only Safari on desktop Mac (will never have touchscreen - iPad difference):
        return this.ua.indexOf('Safari') > -1 && this.ua.indexOf('Chrome') == -1 && !("ontouchend" in document);
    },
    isAndroidGDrive: function () {
        //On Android Chrome, files cannot be uploaded from GDrive (crbug.com/1063576):
        return this.ua.indexOf('Android') > -1 && this.ua.indexOf('Chrome') > -1;
    },
    isDirectoryPickerSupported: function () {
        //Whether webkitdirectory allows selecting folders.
        //Often unavailable on mobile even though webkitdirectory property exists.
        //Not yet shipped on iOS (https://bugs.webkit.org/show_bug.cgi?id=271705):
        if (browserCompat.isWebkit() && !browserCompat.isWebkitDesktop())
            return false;
        if (this.ua.indexOf('Android') > -1) {
            //Works since Chromium 132+:
            for (browser of navigator?.userAgentData?.brands ?? [])
                if (browser.brand == 'Chromium' && parseInt(browser.version) >= 132)
                    return true;
            //Firefox and older Chromium:
            return false;
        }
        //Desktop:
        return true;
    },
    isTWABridgeAvailable: function () {
        //Whether the TWA Android app can launch other activities thru intents
        //Doesn't work on ChromeOS (opens blank window), no activity
        return this.ua.indexOf('CrOS') == -1;
    },
    isSamsungInternet: function () {
        //All versions of Samsung Internet:
        return this.ua.indexOf('SamsungBrowser') > -1;
    },
    isFSASupported: function () {
        //File System Access API with real user filesystem:
        return 'showDirectoryPicker' in window;
    },
    isBraveBrowser: function () {
        //Brave browser on all platforms:
        return !!navigator.brave;
    }
};

var storage = {
    _memory: { 'local': {}, 'session': {} },/* for users with disabled cookies/storage */
    _fromWindow: function (type) {
        return window[type + 'Storage']; /* from the global window object */
    },
    works: function (type) {
        //TODO check for Firefox NS_ERROR_FILE_CORRUPTED
        try {
            var wStorage = this._fromWindow(type),
                x = '__test__';
            wStorage.setItem(x, x);
            wStorage.removeItem(x);
            return true;
        } catch (e) {
            return false;
        }
    },
    get: function (type, name) {
        return this.works(type) ?
            this._fromWindow(type).getItem(name) :
            this._memory[type][name] || null;
    },
    set: function (type, name, val) {
        this.works(type) ?
            this._fromWindow(type).setItem(name, val) :
            this._memory[type][name] = String(val);
    },
    getInt: function (type, name) {
        return parseInt(this.get(type, name) || 0);
    }
};


document.addEventListener('DOMContentLoaded', function() {
    var twa = storage.get('session', 'twa');

    //Warn users with disabled storage:
    if (!storage.works('local') || !storage.works('session'))
        alert('Please enable cookies from your browser\'s settings. Otherwise, MConverter may not work.\n' +
            'If you are concerned about privacy, enable first-party cookies only. ' +
            'Third-party tracking cookies are not required.');

    //Detect old unsupported Webkit:
    try {
        var supportedApple = 15;//iOS/Safari version
        if (
            !navigator.userAgent.toLowerCase().includes('bot') &&
            browserCompat.isWebkit() &&
            (navigator.userAgent.match(/Version\/([0-9]+)\./i) && 
            navigator.userAgent.match(/Version\/([0-9]+)\./i)[1] < supportedApple ||
            /* Chrome/Firefox on iOS don't have this ^ */
            navigator.userAgent.match(/OS ([0-9]+)_/i) &&
            navigator.userAgent.match(/OS ([0-9]+)_/i)[1] < supportedApple)
        ) {
            var iOS = "ontouchend" in document;
            if (confirm('Update your ' + (iOS ? 'Apple device' : 'Safari browser') + ' to the latest version in order to use MConverter.'))
                location.href = 'https://support.apple.com/' + (iOS ? 'HT204204' : 'HT204416');
            else
                alert('You may experience errors because you have refused to update it.');
        }
    } catch (err) {
        console.error(err);
        Sentry.captureException(err);
    }


    //Init components:
    toast.init();
    navDrawer.init();

    //GPlay Billing - Digital Goods API:
    if (twa == 'gplay' && 'getDigitalGoodsService' in window && !browserCompat.isSamsungInternet())
        window.getDigitalGoodsService('https://play.google.com/billing')
        .then(service => {
            //Acknowledge previously unacknowledged purchases (slow card):
            service.listPurchases()
            .then(purchases => {
                for (p of purchases)
                    loadScript(ROOT_FOLDER + '/js/gplayBilling.js', () => {
                        gplayBilling.activateSlowPayment(p);
                    });
            })
            .catch(err => {
                //GPlay system connection may not have initialized yet
                console.error(err);
            });
        })
        .catch(err => {
            console.error(err);
        });

    //Hide the app install segments:
    if (twa && document.querySelector('#whyUs > #installSection'))
        document.querySelector('#whyUs > #installSection').style.display = 'none';//homepage
    if (twa && document.querySelector('#getApp'))
        document.querySelector('#getApp').style.display = 'none';//all footers

    //Show overlay message for FB in-app:
    if (browserCompat.isFbInstaInApp())
        loadScript(ROOT_FOLDER + '/js/fbInApp.js', function () {
            fbInApp.init();
        });
    

    //MS Store Ads campaigns:
    if (twa == 'mswin') {
        //Hacky workaround for MS UET to load:
        window.process = {
            env: {
                NODE_ENV: 'development'
            }
        };
        loadScript(ROOT_FOLDER + '/js/bundle/uet-pwa-sdk.umd.js', () => {
            window.uet = new UETPWASDK({ ti: '343129029' });
        });

        if ('acquisitionInfoProvider' in navigator)
            navigator.acquisitionInfoProvider.getDetails().then(data => {
                if (data.campaignId)
                    logEvt('mswin_ad_acquisition', {
                        'event_category': 'paid_ads',
                        'event_label': 'PWA launch from MS Store ad campaign: ' + data.campaignId
                    });
            }).catch(err => {
                console.error(err);
            });
    }

    //Delayed lazy-loads:
    account.onLoginStateFetched(() => {
        if (!account.loggedIn || !account.activePurchase || account.purchaseRewarded)
            setTimeout(() => loadAdScript(), 500);
        else
            gtag('consent', 'update', {
                'ad_user_data': 'granted',
                'ad_personalization': 'granted',
                'ad_storage': 'granted',
                'analytics_storage': 'granted'
            });
    });

    setTimeout(() => {
        //Full SDK:
        typeof Sentry != 'undefined' && Sentry.forceLoad();

        //Lazy-load QuickLink for next page navigations:
        loadScript(ROOT_FOLDER + '/js/bundle/quicklink.umd.js', () => {
            quicklink.listen({
                delay: 2000,
                throttle: 2,
                ignores: (url) => {
                    return url.includes('#');
                }
            });
        });

        loadScript(ROOT_FOLDER + '/js/translate.js');
        
        if(IN_PRODUCTION) loadScript(ROOT_FOLDER + '/js/consoleGreet.js');
    }, 5000);

    //Replay animations if they already ran during prerender:
    (async () => {
        if (document.prerendering) {
            await notInPrerender;
            document.getAnimations().forEach(anim => {
                anim.cancel();
                anim.play();
            });
        }
    })();
});


(() => {
    var searchParams = new URL(location).searchParams;
    //Detect if from packaged app store:
    if (searchParams.has('twa'))
        storage.set('session', 'twa', searchParams.get('twa'));
    //For Edge 91-93:
    if (searchParams.get('app-install-source') == 'microsoft-store')
        storage.set('session', 'twa', 'mswin');
    //For Edge 93+:
    if (document.referrer == 'app-info://platform/microsoft-store')
        storage.set('session', 'twa', 'mswin');

    //Detect TWA app version:
    if (searchParams.has('twa-version'))
        storage.set('session', 'twa_version', searchParams.get('twa-version'));

    //Detect if from extensions store:
    if (searchParams.has('utm_source') && searchParams.get('utm_source').startsWith('extension-')) {
        var str = searchParams.get('utm_source');
        storage.set('session', 'ext', str.substring(str.indexOf('-') + 1));
    }

    //Detect if from AdWords ad:
    if (searchParams.get('mtm_source') == 'adwords')
        storage.set('session', 'adwords', 1);
    //Faster removal of content not for AdWords users:
    if (storage.get('session', 'adwords'))
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelector('.plan[data-plan-id="pass"]').style.display = 'none';
            document.querySelector('#frequencySwitches').style.display = 'none';
        });
})();