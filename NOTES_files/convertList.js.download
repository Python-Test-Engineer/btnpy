window.onbeforeunload = function () {
    if (storage.getInt('session', 'prevent_unload'))
        return 'You have incomplete conversion(s). If you navigate away from this page, you will lose the conversion(s).';
};
window.addEventListener('pagehide', function () {
    if (storage.getInt('session', 'prevent_unload')) {
        var tokens = [];
        for (var i = 0; i < convertList.conversionData.length; i++)
            if (!convertList.conversionData[i].onDeviceURL && convertList.conversionData[i].token && !convertList.conversionData[i].finished)
                tokens.push(convertList.conversionData[i].token);
        if (tokens.length > 0) {
            navigator.sendBeacon(
                ROOT_FOLDER + '/cf_nocache/ajax/cancel_conv.php',
                tokens.toString()
            );
            loadScript(ROOT_FOLDER + '/js/runningTime.js', function () {
                runningTime.end();
            });
        }

        //Because when logged in, downloads can be restored from conversion history:
        //Note - the clearing executes unreliably in Chromium: crbug.com/1218400
        if (!account.loggedIn) notifs.clear();
    }
});


var convertList = {
    dom: { toolbarActions: {} },
    elements: [],
    files: [],
    conversionData: [],
    inServerQueueIdxs: [], /* to avoid API queueing */
    _adsCnt: 0,
    _filesUICnt: 0, /* used for the toolbar */
    _unsupportedFormats: [],
    _cntOverMaxBatchSize: 0,
    _refillIfPremium: false,
    init: function () {
        this.dom.card = document.querySelector('#filesListCard');
        this.dom.list = this.dom.card.querySelector('#filesList');
        this.dom.template = this.dom.card.querySelector('template');
        this.dom.toolbar = this.dom.card.querySelector('.toolbar-title');
        this.dom.toolbarActions.addClouds = this.dom.card.querySelectorAll('.cloud-picker-btn');
        this.dom.toolbarActions.addMore = this.dom.card.querySelector('#btnAddMore');
        this.dom.toolbarActions.addFolder = this.dom.card.querySelector('#btnAddFolder');
        this.dom.toolbarActions.cancel = this.dom.card.querySelector('#btnBulkCancel');
        this.dom.toolbarActions.download = this.dom.card.querySelector('#btnBulkDownload');
        this.dom.toolbarActions.save = this.dom.card.querySelector('#btnBulkSave');

        storage.set('session', 'prevent_unload', 1);
    },
    fillFilesList: function (files) {
        //Ensure max MB size and max batch size have initialized:
        account.onLoginStateFetched(() => {
            //Resolve the promises sequentially, to keep the order in which they were selected:
            var addFiles = async () => {
                for (const file of files) {
                    await this._addFileItem(file);
                }
            };
            addFiles().then(() => {
                this.enableAddMore();
                if (this.files.length >= this.getMaxBatchSize(true))
                    this.disableAddMore();
                if (this.files.length >= this.getMaxBatchSize()) {
                    if (account.currentPlan == 'pro' || (account.currentPlan == 'free' && storage.get('session', 'adwords'))) {
                        toast.show("For now, we support converting up to " + PLANS.pro.batch_limit + " files at once.", 4000, "OK", function () {
                            toast.hide();
                        });
                        logEvt('over_batch_limit', {
                            'event_category': 'convert_list',
                            'event_label': 'Pro user selected over ' + PLANS.pro.batch_limit + ' files in a batch'
                        });
                    } else if (this._cntOverMaxBatchSize) {
                        const total = this.files.length + this._cntOverMaxBatchSize;
                        loadScript(ROOT_FOLDER + '/js/upgrade.js', () => {
                            upgrade.setUpgradeHeadings('Convert more than ' + PLANS[account.currentPlan].batch_limit + ' files in one batch');
                            if(total > PLANS.plus.batch_limit) upgrade.highlightPlan('pro', true);
                        });
                        location.href = '#upgrade';
                        logEvt('see_upgrade_dialog', {
                            'event_category': 'premium',
                            'event_label': 'From Batch Size Limit',
                            'value': this._cntOverMaxBatchSize
                        });
                    }
                }
        
                dragdrop.dom.filePicker.value = '';
                dragdrop.dom.folderPicker.value = '';
                this.dom.card.style.display = '';
                this.updateToolbarCount();
        
                if (this._unsupportedFormats.length)
                    this.sendUnsupportedFormats([...new Set(this._unsupportedFormats)]);
        
                this.fetchTargetFormats();
                this.triggerAd();

                /*
                //Close the top anchor ad if side banners will show:
                if (window.matchMedia('(min-width: 850px)').matches)
                    document.querySelector('.enkurs > iframe')?.contentDocument?.querySelector('#stpd_close')?.click();
                */
                
                //Reset and prepare for next time this function is called:
                this._unsupportedFormats = [];
                this._cntOverMaxBatchSize = 0;
            });
        }, true);
    },
    _addFileItem: async function (file, isGuessedFormat = false) {
        if (this.files.length >= this.getMaxBatchSize()) {
            this._cntOverMaxBatchSize++;
            return;
        }
        if (this._alreadyExists(file)) {
            toast.show("This file is already selected: " + file.name, 7000, "OK", function () {
                toast.hide();
            });
            return;
        }

        var item = this.dom.template.content.cloneNode(true);
        item.querySelector('.filename').textContent = file.name;
        item.querySelector('.filename').title = file.name;
        var filetype = userFriendly.getCategoryFromMime(file.type);
        item.querySelector('.file-type').textContent = filetype + ' file';
        item.querySelector('.icon-svg').setAttribute('d', userFriendly.getFileSVG(filetype));
        var fileStatusDOM = item.querySelector('.file-status');
        var convData = {
            sourceFormat: file.name.substr(file.name.lastIndexOf(".")+1).toLowerCase()
        };
        //Workarounds for tar.gz, tar.bz2, and tar.xz:
        if(convData.sourceFormat == 'gz' && file.name.toLowerCase().endsWith('.tar.gz')) convData.sourceFormat = 'tgz';
        if(convData.sourceFormat == 'bz2' && file.name.toLowerCase().endsWith('.tar.bz2')) convData.sourceFormat = 'tbz2';
        if(convData.sourceFormat == 'xz' && file.name.toLowerCase().endsWith('.tar.xz')) convData.sourceFormat = 'txz';
        if (SUPPORTED_SOURCES_ALL.includes(convData.sourceFormat)) {
            if (file.size > PLANS.pro.filesize_limit) {
                var formattedSize = (file.size / 1000000000).toFixed(2) + ' GB';
                fileStatusDOM.classList.add('error');
                fileStatusDOM.textContent = 'Too large (' + formattedSize + '). Max limit with MConverter Pro: ' + PLANS.pro.filesize_limit_human;
                toast.show("You have file(s) over the supported size limit of " + PLANS.pro.filesize_limit_human + ".", 8000, "OK", function () {
                    toast.hide();
                });
                logEvt('file_too_large', {
                    'event_category': 'filesize',
                    'event_label': convData.sourceFormat.toUpperCase() + ' file too large: ' + formattedSize
                });
            } else if (file.size > PLANS[account.currentPlan].filesize_limit) {
                var needsPro = file.size > PLANS.plus.filesize_limit;
                fileStatusDOM.classList.add('error');
                fileStatusDOM.textContent = 'Over ' + PLANS[account.currentPlan].filesize_limit_human + ', upgrade to ' + (needsPro ? 'Pro ' : 'Plus or Pro') + ' to convert';
                this._refillIfPremium = true;

                loadScript(ROOT_FOLDER + '/js/upgrade.js', () => {
                    upgrade.setUpgradeHeadings('Convert files over ' + PLANS[account.currentPlan].filesize_limit_human);
                    if(needsPro) upgrade.highlightPlan('pro', true);
                });
                location.href = '#upgrade';
                logEvt('see_upgrade_dialog', { 'event_category': 'premium', 'event_label': 'From Filesize Limit File' });
            } else if (file.size == 0) {
                fileStatusDOM.classList.add('error');
                fileStatusDOM.textContent = 'File is empty';
                toast.show("Try selecting files differently: browse, drag & drop, copy & paste, etc.", 10000, "OK", function () {
                    toast.hide();
                });
                logEvt('file_empty', {
                    'event_category': 'filesize',
                    'event_label': convData.sourceFormat.toUpperCase() + ' file is empty'
                });
            } else {
                fileStatusDOM.textContent = 'Ready to begin';
                convData.isValid = true;//The file is OK and its sourceFormat can be converted

                if (!account.activePurchase && file.size > REWARD_THRESHOLD.size)
                    loadScript(ROOT_FOLDER + '/js/rewardGAM.js', () => {
                        rewardGAM.preload();
                    });
            }
        } else if (!isGuessedFormat) {
            await this._guessContentsFormatAndAdd(file);
            return;//prevents duplicate adding of the file
        } else {
            fileStatusDOM.classList.add('error');
            fileStatusDOM.textContent = 'Unsupported format';
            toast.show("You have file(s) in unsupported formats.", 4000, "OK", function () {
                toast.hide();
            });
            this._unsupportedFormats.push(convData.sourceFormat);
        }
        item.querySelector('.share-btn').addEventListener('click', e => {
            var listItem = e.target.closest('.file-item');
            var index = this.elements.indexOf(listItem);

            var shareBtn = listItem.querySelector('.share-btn:not(.disabled)');
            if(!shareBtn) return;//It's disabled
            
            shareBtn.classList.add('disabled');
            loadScript(ROOT_FOLDER + '/js/sharer.js', function () {
                sharer.startDialog(index);
                shareBtn.classList.remove('disabled');
            });
        });
        item.querySelector('.left-btn').addEventListener('click', e => {
            var listItem = e.target.closest('.file-item');
            var index = this.elements.indexOf(listItem);

            var leftBtn = listItem.querySelector('.left-btn:not(.disabled)');
            if(!leftBtn) return;//It's disabled
            switch (leftBtn.dataset.action) {
                case 'download':
                    download.startChoice(index);
                    break;
                case 'restart':
                    convertList.changeActionBtn(index, '', 'left');
                    upload.start(index, true);
                    break;
            }
        });
        item.querySelector('.right-btn').addEventListener('click', e => {
            var listItem = e.target.closest('.file-item');
            var index = this.elements.indexOf(listItem);

            var rightBtn = listItem.querySelector('.right-btn:not(.disabled)');
            if(!rightBtn) return;//It's disabled
            switch (rightBtn.dataset.action) {
                case 'remove':
                    //Conversions have not started yet
                    rightBtn.style.cursor = 'wait';
                    rightBtn.classList.add('disabled');
                    this.removeElementAnimated(index);
                    break;
                case 'cancel':
                    convertList.updateProgress(index, 'Cancelling...', 0);
                    loadScript(ROOT_FOLDER + '/js/cancelConv.js', function () {
                        cancelConv.cancelByIdx(index);
                    });
                    //No break on purpose, to also disable the buttons
                case 'delete':
                    rightBtn.style.cursor = 'wait';
                    rightBtn.classList.add('disabled');
                    listItem.querySelector('.share-btn').classList.add('disabled');
                    listItem.querySelector('.left-btn').classList.add('disabled');

                    if(rightBtn.dataset.action == 'cancel') break;
                    convertList.updateProgress(index, 'Deleting...', 100);
                    loadScript(ROOT_FOLDER + '/js/deleteConv.js', function () {
                        deleteConv.delByIdx([index]);
                    });
                    break;
                case 'error':
                    var error = convertList.conversionData[index].errorData;
                    toast.show(error.description, 10000, error.reportConvId ? "SEND ERROR REPORT" : "OK", function () {
                        if (error.reportConvId) {
                            //Append the conversion ID to the contact form link:
                            contact.openWith({
                                hs_ticket_category: 'PRODUCT_ISSUE',
                                file_conversion_id_or_on_device_conversion_format: error.reportConvId
                            });
                        } else {
                            toast.hide();
                        }
                    });
                    break;
            }
        });
        var statusContainer = item.querySelector('.file-status-container');
        statusContainer.addEventListener('click', () => {
            //Allow downloading by also clicking on the filename and status area:
            var dlBtn = statusContainer.nextElementSibling.querySelector('.left-btn[data-action="download"]');
            if(dlBtn) dlBtn.dispatchEvent(new Event('click'));
        });
        this.dom.list.appendChild(item);

        this.elements.push(this.dom.list.lastElementChild);
        this.files.push(file);
        this.conversionData.push(convData);
    },
    _guessContentsFormatAndAdd: function (file) {
        return new Promise((resolve, reject) => {
            loadScript(ROOT_FOLDER + '/js/guessFormat.js', async () => {
                var type = await guessFormat.asAny(file);
                if (type) {
                    var fixedFile = new File(
                        [file],
                        file.name + '.' + type.ext,
                        { type: type.mime, lastModified: file.lastModified }
                    );
                    this._addFileItem(fixedFile, true);
                    resolve();
                } else {
                    //Show the Unsupported format error:
                    this._addFileItem(file, true);
                    resolve();
                }
            });
        });
    },
    getValidSourceFormats: function (includeDuplicates) {
        var formats = [];
        for (var i = 0; i < this.conversionData.length; i++)
            if(this.conversionData[i].isValid) formats.push(this.conversionData[i].sourceFormat);
        //The Set and Spread operators remove duplicates:
        return includeDuplicates ? formats : [...new Set(formats)];
    },
    getValidSourceFormatsByCount: function () {
        var occurrences = {};
        this.getValidSourceFormats(true).forEach(x => occurrences[x] = (occurrences[x] || 0) + 1);
        return occurrences;
    },
    fetchTargetFormats: function (attemptCnt = 0) {
        var formData = new FormData();
        formData.append('extensions', this.getValidSourceFormats());

        //Needed for subsequent fetches of target formats:
        if (typeof targetFormats !== 'undefined')
            targetFormats.willRefill();
    
        fetch(ROOT_FOLDER + '/cf_nocache/ajax/get_targets.php', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if(response.ok) return response.json();
            throw Error('Server returned status code ' + response.status);
        })
        .then(data => {
            loadScript(ROOT_FOLDER + '/js/targetFormats.js', function () {
                targetFormats.prepareList();
                targetFormats.fillList(data.formats);

                if (data.api_down) targetFormats.displayAPIOffline(data.api_down);
            });
        })
        .catch(err => {
            if (attemptCnt < 2) {
                setTimeout(() => {
                    this.fetchTargetFormats(attemptCnt + 1);
                }, 500);
                return;
            }

            loadScript(ROOT_FOLDER + '/js/targetFormats.js', function () {
                targetFormats.prepareList();
                targetFormats.fillList();
                targetFormats.displayAPIOffline('Please try again in a few minutes. If it still doesn\'t work, contact us.');
            });
            
            console.error(err);
            //Sentry.captureException(err);
        });
    },

    getMaxBatchSize: function (getHardLimit) {
        //The max possible limit ever:
        if(getHardLimit || (account.currentPlan == 'free' && storage.get('session', 'adwords'))) return PLANS.pro.batch_limit;

        //Depending on the user's plan:
        return PLANS[account.currentPlan].batch_limit;
    },
    enableAddMore: function () {
        dragdrop.enable();
        paste.enableListener();
        this.dom.toolbarActions.addClouds.forEach(el => el.style.display = '');
        this.dom.toolbarActions.addMore.style.display = '';
        if (browserCompat.isDirectoryPickerSupported())
            this.dom.toolbarActions.addFolder.style.display = '';
    },
    disableAddMore: function () {
        dragdrop.disable();
        paste.disableListener();
        this.dom.toolbarActions.addClouds.forEach(el => el.style.display = 'none');
        this.dom.toolbarActions.addMore.style.display = 'none';
        this.dom.toolbarActions.addFolder.style.display = 'none';
    },

    areAllFinished: function () {
        this.updateTitleNotifs();//since this is always called when a new conversion finishes

        var cnt = this.conversionData.length;
        for(var i = 0; i < cnt; i++)
            if(!this.conversionData[i].finished) return false;
        convertList.dom.toolbarActions.cancel.style.display = 'none';//nothing can be cancelled anymore
        return true;
    },
    areAllDeleted: function () {
        //Are all server conversions deleted
        //Returns true also if there are no server conversions (i.e. all are on-device)
        var cnt = this.conversionData.length;
        for(var i = 0; i < cnt; i++)
            if(!this.conversionData[i].onDeviceURL && this.conversionData[i].token && !this.conversionData[i].deleted)
                return false;
        if (!this.areSomeOnDevice()) {
            //Nothing can be downloaded anymore:
            convertList.dom.toolbarActions.download.style.display = 'none';
            convertList.dom.toolbarActions.save.style.display = 'none';

            convertList.dom.toolbar.style.display = 'block';//for mobile - temporary - until the checkboxes are done
        }
        return true;
    },
    areSomeOnDevice: function () {
        var cnt = this.conversionData.length;
        for(var i = 0; i < cnt; i++)
            if(this.conversionData[i].onDeviceURL) return true;
        return false;
    },
    areSomeErroredOrCancelled: function () {
        var cnt = this.conversionData.length;
        for(var i = 0; i < cnt; i++)
            if(typeof convertList.conversionData[i].outputsCnt === 'undefined') return true;
        return false;
    },
    hasInLocalQueueBefore: function (idx) {
        for(var i = 0; i < idx; i++)
            if(!this.conversionData[i].token && !this.conversionData[i].finished)
                return true;
    },

    isDownloadable: function (idx) {
        return convertList.conversionData[idx].finished &&
            /* Ensure it's downloadable, not cancelled or errored: */
            typeof convertList.conversionData[idx].outputsCnt !== 'undefined' &&
            !convertList.conversionData[idx].deleted;
    },

    animateActionBtn: function (btn) {
        //In relatively recent Safari, WebAnimation API not supported
        //Check for support:
        if ('animate' in btn && !document.body.classList.contains('reduced-motion')) {
            btn.animate([
                { opacity: 0, transform: 'scale(.7)' },
                { opacity: 1, transform: 'scale(1)' }
            ], {
                duration: 200,
                easing: 'cubic-bezier(0, 0, .2, 1)'
            });
        }
    },
    changeActionBtn: function (idx, action, btnPos, title, icon) {
        var btn = this.elements[idx].querySelector('.'+btnPos+'-btn');
        btn.style.display = '';
        btn.style.cursor = '';
        if (action == '') {
            btn.classList.add('disabled');
            btn.style.display = 'none';
            return;
        }
        btn.classList.remove('disabled');
        
        btn.dataset.action = action;
        this.elements[idx].querySelector('.'+btnPos+'-btn > title').textContent = title;
        this.elements[idx].querySelector('.'+btnPos+'-btn > use').setAttribute('href', '#icn-' + icon);

        this.animateActionBtn(btn);
    },
    updateProgress: function (idx, txt, bar) {
        this.elements[idx].querySelector('.file-status').textContent = txt;
        this.elements[idx].querySelector('.determinate').style.transform = 'scaleX(' + bar/100 + ')';
    },
    setErrored: function (idx) {
        this.updateProgress(idx, this.conversionData[idx].errorData.name, 0);
        this.elements[idx].querySelector('.file-status').classList.add('error');
        this.elements[idx].querySelector('.right-btn').classList.add('error');
        this.changeActionBtn(idx, 'error', 'right', 'Error. Click to see reason.', 'alert');
    },
    removeElementAnimated: function (idx) {
        if (!document.body.classList.contains('reduced-motion')) {
            //To avoid jank/low fps,
            //apply height shrinking only when there are fewer items:
            if (this.conversionData.length < 30)
                this.elements[idx].style.height = this.elements[idx].offsetHeight + 'px';
            this.elements[idx].style.animation = 'fade-out-shrink-height .3s var(--standard-bezier) both';
        }
        setTimeout(function () {
            convertList.removeElement(idx);
        }, document.body.classList.contains('reduced-motion') ? 0 : 300);
    },
    removeElement: function (idx) {
        //if(this.conversionData[idx].token) return; //Conversions are in progress and the indexes will get messed up

        this.elements[idx].remove();
        this.elements.splice(idx, 1);
        this.files.splice(idx, 1);
        this.conversionData.splice(idx, 1);

        this.updateToolbarCount();

        //No elements left:
        if (this.elements.length == 0) {
            storage.set('session', 'prevent_unload', 0);
            location.href = location.pathname;//reload page without searchParams (e.g. to remove receiving-file-share)
            this.dom.card.style.display = 'none';
            return;
        }

        if (this.files.length < this.getMaxBatchSize(true))
            this.enableAddMore();

        //Update the target formats list:
        if (typeof targetFormats === 'undefined' || !targetFormats.selectedFormat.name)
            this.fetchTargetFormats();
    },

    _areFilesEqual: function (file1, file2) {
        return file1.name == file2.name && file1.size == file2.size;
    },
    _alreadyExists: function (file) {
        var cnt = this.files.length;
        for (var i = 0; i < cnt; i++)
            if (this._areFilesEqual(file, this.files[i]))
                return true;
        return false;
    },

    updateToolbarCount: function () {
        var oldCnt = this._filesUICnt;
        this._filesUICnt = this.conversionData.length;
        this.dom.toolbar.textContent = this._filesUICnt + ' selected';

        if (document.body.classList.contains('reduced-motion')) return;
        if (oldCnt < this._filesUICnt) {
            this.dom.toolbar.style.animation = 'top-counter .2s';
        } else {
            this.dom.toolbar.style.animation = 'bottom-counter .2s';
        }
        this.dom.toolbar.addEventListener('animationend', function (e) {
            e.target.style.animation = '';
        }, { once: true });
    },

    bulkCancel: function () {
        this.dom.toolbarActions.cancel.disabled = true;
        toast.show('Cancelling all conversions...', 4000);
        loadScript(ROOT_FOLDER + '/js/cancelConv.js', function () {
            cancelConv.cancelByIdxs([...Array(convertList.conversionData.length).keys()]);
        });
    },
    bulkDownload: function () {
        if (download.hasActiveChecker()) return;

        this.dom.toolbarActions.download.disabled = true;
        toast.show('Starting downloads...', 1000);
        download.downloadByIdxs(0, [...Array(convertList.conversionData.length).keys()])
    },
    bulkSave: function () {
        loadScript(ROOT_FOLDER + '/js/fsa.js', function () {
            fsa.start([...Array(convertList.conversionData.length).keys()], 'Bulk toolbar');
        });
    },

    sendUnsupportedFormats: function (formats, retriesCnt = 0) {
        if(retriesCnt > 2) return;

        var formData = new FormData();
        formData.append('formats', JSON.stringify(formats));
        fetch(ROOT_FOLDER + '/cf_nocache/ajax/log_unsupported_formats.php', {
            method: "POST",
            body: formData
        })
        .then(response => {
            if(response.ok) return response.json();
            throw Error('Server returned status code ' + response.status);
        })
        .then(data => {
            if(!data.success) throw Error('Response included error: ' + data.error);
        })
        .catch(err => {
            setTimeout(() => {
                this.sendUnsupportedFormats(formats, retriesCnt + 1);
            }, 5000);

            console.error(err);
            //Sentry.captureException(err);
        });
    },

    triggerAd: function () {
        //onLoginStateFetched has already been called
        if (!window.adTriggered && (!account.loggedIn || !account.activePurchase || account.purchaseRewarded)) {
            __abd.init();

            loadAdScript();
            if (window.bottomProvider == 'adsense')
                (adsbygoogle = window.adsbygoogle || []).push({});
            if (hasSetupadBanners()) {
                if (window.setupadLoaded)
                    initSetupad();
                else
                    window.initSetupadOnLoad = true;
            }

            if (window.bottomProvider == 'setupad') {
                //Show blank space to keep the scroll position while no ad is rendered:
                var bottomUnit = document.querySelector('#bottomUnit');
                bottomUnit.classList.add('active-provider');
                googletag.cmd.push(() => {
                    googletag.pubads().addEventListener('slotRequested', e => {
                        if(e.slot.getSlotElementId() != 'mconverter_eu_bottom_banner_responsive') return;
                        delete bottomUnit.dataset.rendered;
                    });
                    googletag.pubads().addEventListener('slotRenderEnded', e => {
                        if(e.slot.getSlotElementId() != 'mconverter_eu_bottom_banner_responsive') return;
                        bottomUnit.dataset.rendered = true;
                    });
                });
            }

            document.querySelector('.ad-label').style.display = '';
            document.querySelector('.below-filesListCard').style.display = '';
            window.adTriggered = true;
        } else if (window.adTriggered && account.loggedIn && account.activePurchase && !account.purchaseRewarded) {
            //User has signed into a Premium account after having selected files
            if (!document.querySelector('#noAbd'))
                document.querySelector('.below-filesListCard').style.display = 'none';
            document.querySelector('.ad-label').textContent = 'Ads will be removed after refresh or on next page load';
            document.querySelector('.ad-label').style.pointerEvents = 'none';//disable clicking to Go Premium
            //Immediately remove ads when allowed:
            //document.querySelector('.enkurs > iframe')?.contentDocument?.querySelector('#stpd_close')?.click();
            googletag.cmd.push(() => {
                googletag.destroySlots();
            });
        }
    },
    refillIfNeeded: function () {
        //Do not refill if converting has started:
        if (this._refillIfPremium && !targetFormats.selectedFormat.name) {
            //User has just upgraded. There are files which are now convertible (e.g. bigger file size).
            //Re-trigger all the checks for file selection by removing and re-adding all:
            var filesCopy = this.files;
            this.elements.forEach((el) => {
                el.remove();
            });
            this.elements = [];
            this.files = [];
            this.conversionData = [];
            this.fillFilesList(filesCopy);
        }
    },

    updateTitleNotifs: function () {
        //Calculate conversion counts:
        var cnt = {
            progress: 0, /* conversions in progress */
            done: 0, /* conversions ready to download (not cancelled or errored) */
            total: this.conversionData.length
        };
        for (var i = 0; i < cnt.total; i++) {
            if (!this.conversionData[i].finished)
                cnt.progress++;
            else if (this.isDownloadable(i))
                cnt.done++;
        }

        userFriendly.updateTitle(cnt);
        notifs.pushConvStatus(cnt.progress ? 0 : 1, cnt);
    }
};


var __abd = {
    init: function () {
        if (window.bottomProvider == 'adsense') {
            this._el = document.querySelector('ins[data-ad-slot="9865539049"]');

            this._observer = new MutationObserver(mutations => {
                for (const mutation of mutations)
                    if (mutation.attributeName == 'data-adsbygoogle-status')
                        this.check();
            });

            if (this._el)
                this._observer.observe(this._el, { attributes: true });
            else
                this.check();

            setTimeout(this.check.bind(this), 5000);
        } else {
            this._el = document.querySelector('#bottomUnit');

            googletag.cmd.push(() => {
                googletag.pubads().addEventListener('slotResponseReceived', onSlotResponseReceived);
            });

            setTimeout(this.check.bind(this), 20000);
        }
    },
    check: function () {
        if (window.bottomProvider == 'adsense') {
            this._observer.disconnect();

            //Additional check for DDG & uB:
            if (document.querySelector('#noAbd') && (!this._el || this._el.clientHeight < 2))
                document.querySelector('#noAbd').remove();
        } else {
            googletag.cmd.push(() => {
                googletag.pubads().removeEventListener('slotResponseReceived', onSlotResponseReceived);
            });

            if (document.querySelector('#noAbd') && (!this._el || !this._el.dataset.done))
                document.querySelector('#noAbd').remove();
        }
        
        window.abdDone = true;
    }
};
function onSlotResponseReceived() {
    __abd._el.dataset.done = true;
    __abd.check();
}