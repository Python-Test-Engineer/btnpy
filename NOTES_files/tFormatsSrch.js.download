var tFormatsSrch = {
    dom: {
        container: document.querySelector('#srchContainer'),
        input: document.querySelector('#srchFormats'),
    },
    focusOnSlash: true,
    _lastSearch: { /* properties: value, matches */ },

    init: function () {
        if(this._initted) return;//prevent duplicating events due to bind(this)
        this._initted = true;

        ['input', 'keydown', 'focus'].forEach(evtName => {
            this.dom.input.addEventListener(evtName, this._handlers[evtName].bind(this));
        });

        document.addEventListener('keyup', this._handlers.keyup.bind(this));
    },
    show: function () {
        this.focusOnSlash = true;
        this.dom.container.style.display = '';

        targetFormats.dom.toolbar.style.textAlign = 'left';
        targetFormats.dom.toolbar.classList.add('truncate');
    },
    hide: function () {
        this.focusOnSlash = false;
        this.dom.container.style.display = 'none';

        targetFormats.dom.toolbar.style.textAlign = '';
        targetFormats.dom.toolbar.classList.remove('truncate');
    },
    focus: function () {
        utils.focusNoKeyboard(this.dom.input);
    },
    recheck: function () {
        this.dom.input.dispatchEvent(new Event('input', {bubbles:true}));
    },
    findMatches: function (needle) {
        needle = needle.toLowerCase();
        if(needle.charAt(0) == '.') needle = needle.substring(1);//remove leading dot
        needle = needle.replace(/\//g, '');//remove `/` to match pdf/a

        var matches = [];
        targetFormats.available.forEach(format => {
            if (format.name.includes(needle) || format.keywords.some(k => k.includes(needle)))
                matches.push(format.name);
        });
        return matches;
    },
    _logDebouncedSearch: utils.debounce(function () {
        if(!this._lastSearch.value) return;//search term erased
        _paq.push([
            'trackSiteSearch',
            this._lastSearch.value,
            'Target Formats for Selected File(s)',
            this._lastSearch.matches
        ]);
    }, 1000),
    
    _handlers: {
        /* On search input: */
        input: function (e) {
            this._lastSearch.value = e.target.value;
            var matches = this.findMatches(this._lastSearch.value);
            targetFormats.updateMatches(matches);
            this._lastSearch.matches = matches.length;
            this._logDebouncedSearch();
        },
        keydown: function (e) {
            if(e.key !== 'Enter') return;
            //Enter key should act as submit for exact format matches:
            var matches = this.findMatches(e.target.value);
            //Include `pdf` to restore behavior prior to `pdfa.pdf`:
            if (matches.length == 1 || (e.target.value == 'pdf' && matches.length > 0))
                targetFormats.selectByName(matches[0]);
        },
        focus: function () {
            //Better UX on mobile:
            if (window.innerWidth <= 600)
                setTimeout(() => {
                    this.dom.container.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }, 100);
        },

        /* On global page: */
        keyup: function (e) {
            if (!this.focusOnSlash) return;
            if (e.key !== '/' || e.ctrlKey || e.metaKey) return;
            if (/^(?:input|textarea|select)$/i.test(e.target.tagName)) return;

            e.preventDefault();
            this.focus();
        }
    }
};

tFormatsSrch.init();